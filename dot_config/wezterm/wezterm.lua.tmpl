-- Pull in the wezterm API
local wezterm = require 'wezterm'
local mux = wezterm.mux
local projects = require 'projects'
local act = wezterm.action

-- This will hold the configuration.
local config = wezterm.config_builder()

config.max_fps = 120

local function move_pane(key, direction)
  return {
    key = key,
    mods = 'LEADER',
    action = act.ActivatePaneDirection(direction),
  }
end

local function resize_pane(key, direction)
  return {
    key = key,
    action = act.AdjustPaneSize { direction, 3 }
  }
end

local function get_process_name(tab)
  local process_name = tab.active_pane.user_vars.PROG

  if process_name == nil then
    process_name = string.gsub(tab.active_pane.foreground_process_name, "(.*[/\\])(.*)", "%2")
  end

  if process_name == "wslhost.exe" then
    local pane = tab.active_pane
    process_name = pane.title
  end

  if process_name == "" then
    process_name = "zsh"
  end

  return process_name
end
{{ if eq .chezmoi.os "linux" -}}
local function get_process(tab)
  local process_icons = {
        ["docker"] = {
      { Foreground = { Color = colors.blue } },
      { Text = wezterm.nerdfonts.linux_docker },
    },
        ["docker-compose"] = {
      { Foreground = { Color = colors.blue } },
      { Text = wezterm.nerdfonts.linux_docker },
    },
        ["nvim"] = {
      { Foreground = { Color = colors.green } },
      { Text = wezterm.nerdfonts.custom_vim },
    },
        ["v"] = {
      { Foreground = { Color = colors.green } },
      { Text = wezterm.nerdfonts.custom_vim },
    },
        ["vim"] = {
      { Foreground = { Color = colors.green } },
      { Text = wezterm.nerdfonts.dev_vim },
    },
        ["node"] = {
      { Foreground = { Color = colors.green } },
      { Text = wezterm.nerdfonts.mdi_hexagon },
    },
        ["zsh"] = {
      { Foreground = { Color = colors.peach } },
      { Text = wezterm.nerdfonts.dev_terminal },
    },
        ["bash"] = {
      { Foreground = { Color = colors.subtext0 } },
      { Text = wezterm.nerdfonts.cod_terminal_bash },
    },
        ["htop"] = {
      { Foreground = { Color = colors.yellow } },
      { Text = wezterm.nerdfonts.mdi_chart_donut_variant },
    },
        ["cargo"] = {
      { Foreground = { Color = colors.peach } },
      { Text = wezterm.nerdfonts.dev_rust },
    },
        ["go"] = {
      { Foreground = { Color = colors.sapphire } },
      { Text = wezterm.nerdfonts.mdi_language_go },
    },
        ["lazydocker"] = {
      { Foreground = { Color = colors.blue } },
      { Text = wezterm.nerdfonts.linux_docker },
    },
        ["git"] = {
      { Foreground = { Color = colors.peach } },
      { Text = wezterm.nerdfonts.dev_git },
    },
        ["lazygit"] = {
      { Foreground = { Color = colors.peach } },
      { Text = wezterm.nerdfonts.dev_git },
    },
        ["lua"] = {
      { Foreground = { Color = colors.blue } },
      { Text = wezterm.nerdfonts.seti_lua },
    },
        ["wget"] = {
      { Foreground = { Color = colors.yellow } },
      { Text = wezterm.nerdfonts.mdi_arrow_down_box },
    },
        ["curl"] = {
      { Foreground = { Color = colors.yellow } },
      { Text = wezterm.nerdfonts.mdi_flattr },
    },
        ["gh"] = {
      { Foreground = { Color = colors.mauve } },
      { Text = wezterm.nerdfonts.dev_github_badge },
    },
  }

  local process_name = get_process_name(tab)
  return wezterm.format(
    process_icons[process_name]
    or { { Foreground = { Color = colors.sky } }, { Text = string.format("%s", process_name) } }
  )
end
local function get_current_working_dir(tab)
  local current_dir = tab.active_pane.current_working_dir
  local HOME_DIR = string.format("file://%s", os.getenv("HOME"))

  return current_dir == HOME_DIR and "  ~"
      or string.format(" %s", string.gsub(current_dir, "(.*[/\\])(.*)", "%2"))
end

wezterm.on("format-tab-title", function(tab)
  return wezterm.format({
    { Attribute = { Intensity = "Half" } },
    { Text = tab.is_active and " [" or "  " },
    { Text = get_process(tab) },
    { Text = "  " },
    { Text = get_current_working_dir(tab) },
    { Text = tab.is_active and "] " or "  " },
    { Foreground = { Color = colors.base } },
  })
end)-- This is where you actually apply your config choice
{{ end -}}
config.set_environment_variables = {
  PATH = '/opt/homebrew/bin:' .. os.getenv('PATH')
}
{{ if eq .chezmoi.os "darwin" }}
-- config.color_scheme = 'Solarized Dark Higher Contrast'
-- config.color_scheme = 'Spacedust'
config.color_scheme = 'Tokyo Night Moon'
config.font = wezterm.font("Cascadia Code NF", { weight = "Regular", stretch = "Normal", style = "Normal" })
{{ if eq .location "home" -}}
config.font_size = 12.2
{{ else }}
config.font_size = 13
{{ end -}}
config.harfbuzz_features = { 'ss19' }
{{ end }}
-- config.color_scheme = 'Atelier Dune (base16)'
{{ if eq .chezmoi.os "linux" }}
config.color_scheme = 'SolarizedDark (Gogh)'
config.font = wezterm.font("Cascadia Code NF", { weight = "Regular", stretch = "Normal", style = "Normal" })
config.harfbuzz_features = { 'ss19' }
config.font_size = 13
{{ end }}
config.leader = { key = "b", mods = "CTRL", timeout_milliseconds = 2000 }
{{ if eq .chezmoi.os "darwin" }}
config.window_background_opacity = 0.90
config.macos_window_background_blur = 30
{{ else }}
config.window_background_opacity = 0.97
{{ end }}
local tabline = wezterm.plugin.require("https://github.com/michaelbrusegard/tabline.wez")

config.keys = {
  {
    key = ',',
    mods = 'SUPER',
    action = act.SpawnCommandInNewTab {
      cwd = wezterm.home_dir,
      args = { 'nvim', wezterm.config_file },
    },
  },
  { -- So we can have a nice responsive view of the leader key
    key = 'b',
    mods = 'CTRL',
    action = wezterm.action_callback(function (win, pane) tabline.refresh(win, pane) end)
  },
  {
    key = 'b',
    mods = 'LEADER|CTRL',
    action = act.SendKey { key = 'b', mods = 'CTRL' },
  },
  {
    key = 'p',
    mods = 'LEADER',
    action = projects.choose_project(), 
  },
  {
    key = 'f',
    mods = 'LEADER',
    action = act.ShowLauncherArgs { flags = 'FUZZY|WORKSPACES' },
  },
  {
    key = '"',
    {{ if eq .chezmoi.os "linux" }}
    mods = 'LEADER|SHIFT',
    {{ else }}
    mods = 'LEADER',
    {{ end }}
    action = act.SplitHorizontal { domain = 'CurrentPaneDomain' },
  },
  {
    key = '%',
    {{ if eq .chezmoi.os "linux" }}
    mods = 'LEADER|SHIFT',
    {{ else }}
    mods = 'LEADER',
    {{ end }}
    action = act.SplitVertical { domain = 'CurrentPaneDomain' },
  },
  {
    key = 't',
    mods = 'LEADER',
    action = act.SpawnTab 'CurrentPaneDomain',
  },
  {
    key = 'x',
    mods = 'LEADER',
    action = act.CloseCurrentPane { confirm = true },
  },
  {
    key = 'RightArrow',
    mods = 'LEADER|SHIFT',
    action = act.ActivateTabRelative(1),
  },
  {
    key = 'LeftArrow',
    mods = 'LEADER|SHIFT',
    action = act.ActivateTabRelative(-1),
  },
  {
    key = 'l',
    mods = 'LEADER|SHIFT',
    action = act.ActivateTabRelative(1),
  },
  {
    key = 'h',
    mods = 'LEADER|SHIFT',
    action = act.ActivateTabRelative(-1),
  },
  { 
    key = 'r',
    mods = 'LEADER',
    action = act.Multiple {
      act.ActivateKeyTable {
        name = 'resize_panes',
        one_shot = false,
        timeout_milliseconds = 2000,
      },
      wezterm.action_callback(function (win, pane) tabline.refresh(win, pane) end),
    }
  },
  move_pane('DownArrow', 'Down'),
  move_pane('UpArrow', 'Up'),
  move_pane('LeftArrow', 'Left'),
  move_pane('RightArrow', 'Right'),
  move_pane('j', 'Down'),
  move_pane('k', 'Up'),
  move_pane('h', 'Left'),
  move_pane('l', 'Right'),
}

config.key_tables = {
    resize_panes = {
        resize_pane('DownArrow', 'Down'),
        resize_pane('UpArrow', 'Up'),
        resize_pane('LeftArrow', 'Left'),
        resize_pane('RightArrow', 'Right'),
        resize_pane('j', 'Down'),
        resize_pane('k', 'Up'),
        resize_pane('h', 'Left'),
        resize_pane('l', 'Right'),
    },
}

local function showLeader (window)
  local icons = '';
  if window:leader_is_active() then
    icons = icons .. '🚀'
  end
  if window:active_key_table() == "resize_panes" then
    icons = icons .. '📐'
  end
  if string.len(icons) > 1 then
    return ' ' .. icons .. ' '
  elseif string.len(icons) > 0 then
    return '  ' .. icons .. '  '
  end
  return '    '
end

tabline.setup({
  sections = {
    tabline_a = { showLeader }, 
    tabline_b = { 'mode' },
    tabline_c = { 'workspace' },
    tabline_d = { ' ' },
  },
  options = {
    color_overrides = {
      copy_mode = {
        a =  {
            bg =  "#313244",
            fg =  "#f9e2af",
        },
        b =  {
            bg =  "#f9e2af",
            fg =  "#181825",
        },
        c =  {
            bg =  "#313244",
            fg =  "#f9e2af",
        },
        d =  {
            bg =  "#181825",
            fg =  "#cdd6f4",
        },
    },
    normal_mode =  {
        a =  {
            bg =  "#313244",
            fg =  "#89b4fa",
        },
        b =  {
            bg =  "#89b4fa",
            fg =  "#181825",
        },
        c =  {
            bg =  "#313244",
            fg =  "#89b4fa",
        },
        d =  {
            bg =  "#181825",
            fg =  "#cdd6f4",
        },
    },
    }
  }
})
tabline.apply_to_config(config)
config.window_decorations = "RESIZE | INTEGRATED_BUTTONS"
config.visual_bell = {
  fade_in_function = 'EaseIn',
  fade_in_duration_ms = 75,
  fade_out_function = 'EaseOut',
  fade_out_duration_ms = 75,
}
config.colors = {
  visual_bell = '#301010',
}
config.audible_bell = 'Disabled'

-- and finally, return the configuration to wezterm
return config

